@model List<Drawing>

@{
    ViewData["Title"] = "Index";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY=" crossorigin="" />
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/leaflet.draw/1.0.4/leaflet.draw.css" />

<div class="content-wrapper">
    <!-- Content Header (Page header) -->
    <section class="content">
        <div class="container-fluid">
            <div class="row mb-2">
                <div class="col-sm-12">
                    <div id="map" style="height:800px">
                    </div>
                </div>
            </div>
        </div><!-- /.container-fluid -->
    </section>
</div>

<script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js" integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo=" crossorigin=""></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/leaflet.draw/1.0.4/leaflet.draw.js"></script>

<script>
    var map = L.map('map').setView([40.2201, 28.9896], 12);

    L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
        maxZoom: 19,
        attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'
    }).addTo(map);

    var drawnItems = new L.FeatureGroup();
    map.addLayer(drawnItems);

    var drawControl = new L.Control.Draw({
        draw: {
            polygon: true,
            polyline: true,
            rectangle: true,
            circle: true,
            marker: true
        },
        edit: {
            featureGroup: drawnItems,
            remove: true,
        }
    });
    map.addControl(drawControl);

    var drawnGeoJSON;//çizilmiş şekli saklamak için değişken


    map.on('draw:created', function (e) {
        var layer = e.layer;

        drawnItems.addLayer(layer);

        var geoJsonObject = layer.toGeoJSON();

        drawnGeoJSON = JSON.stringify(geoJsonObject.geometry);

        // saveGeoJson();

        // function saveGeoJson() {

        //     var datas = JSON.stringify(geoJsonObject.geometry);

        //     $.ajax({
        //         url: "/Map/SaveGeoJson/", // Controller action URL'si
        //         type: 'POST',
        //         contentType: 'application/json',
        //         data: datas,
        //         success: function (response) {
        //             // Başarılı işlem durumunda yapılacaklar
        //             console.log(response);
        //             alert('GeoJSON data saved successfully.');
        //         },
        //         error: function (xhr, status, error) {
        //             // Hata durumunda yapılacaklar
        //             console.error(xhr.responseText);
        //             alert('Error occurred while saving GeoJSON data.');
        //         }
        //     });
        // };
    });


    map.on('draw:edited', function (e) {
        var layers = e.layers;
        layers.eachLayer(function (layer) {


            console.log('Layer edited:', layer.toGeoJSON());
        });
    });

    map.on('draw:deleted', function (e) {
        if (e.layers) {
            var layers = e.layers;
            layers.eachLayer(function (layer) {
                console.log('Layer deleted:', layer);
            });
        }
    });


    function createSaveButton() {
        var saveButton = L.Control.extend({
            options: {
                position: 'topright'
            },
            onAdd: function (map) {
                var container = L.DomUtil.create('div', 'leaflet-bar leaflet-control leaflet-control-custom');

                container.innerHTML = '<button onclick="saveGeoJson()">Save</button>';

                return container;
            }
        });

        map.addControl(new saveButton());
    }

    // Butona tıklandığında geoJSON'u post etme fonksiyonu
    function saveGeoJson() {
        if (drawnGeoJSON) {
            var datas = drawnGeoJSON;

            $.ajax({
                url: "/Map/SaveGeoJson/", // Controller action URL'si
                type: 'POST',
                contentType: 'application/json',
                data: datas,
                success: function (response) {
                    // Başarılı işlem durumunda yapılacaklar
                    console.log(response);
                    alert('GeoJSON data saved successfully.');
                },
                error: function (xhr, status, error) {
                    // Hata durumunda yapılacaklar
                    console.error(xhr.responseText);
                    alert('Error occurred while saving GeoJSON data.');
                }
            });
        }
    }

    // Buton oluşturma işlemini çağır
    createSaveButton();

    var osm = L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
        maxZoom: 19,
        attribution: 'Osm Katmanı'
    });

    var osmHOT = L.tileLayer('https://{s}.tile.openstreetmap.fr/hot/{z}/{x}/{y}.png', {
        maxZoom: 19,
        attribution: 'Osm Hot Katmanı'
    });

    var osmFr = L.tileLayer('http://{s}.tile.openstreetmap.fr/osmfr/{z}/{x}/{y}.png', {
        attribution: 'Map data &copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a>',
        maxZoom: 19
    }).addTo(map);

    var baseMaps = {
        "Osm": osm,
        "Osm.HOT": osmHOT,

    };

    var overMap = {
        "Osm.Fr": osmFr
    };

    var layers = L.control.layers(baseMaps, overMap).addTo(map);

    var geos = L.layerGroup();


    @foreach (var drawing in Model)
    {
        // Geometry'i GeoJSON formatına dönüştür
        string geoJson = GeometryConverter.WktToGeoJson(drawing.Geometry.ToString());

        // Leaflet haritasına geometriyi ekle
        <text>
                                        var geoJsonFeature = @Html.Raw(geoJson);

        var geo = L.geoJSON(geoJsonFeature);
        geos.addLayer(geo);


        </text>
    };


    layers.addOverlay(geos, "Şekiller");

</script>
